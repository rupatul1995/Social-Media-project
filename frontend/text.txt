import User from "../Model/auth.model.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";


export const Login = async (req, res) => {
  try {
    const { email, password } = req.body?.userData;
    if (!email || !password) {
      return res.json({ success: false, error: "All fields are required." });
    }

    const isUserExists = await User.findOne({ email: email });
    if (!isUserExists) {
      return res.json({ success: false, error: "Email not found." });
    }

    const isPasswordCorrect = await bcrypt.compare(
      password,
      isUserExists.password
    );
    console.log(isPasswordCorrect, "isPasswordCorrect");
    if (!isPasswordCorrect) {
      return res.json({ success: false, error: "Password is wrong." });
    }
    const userData = {
      name: isUserExists.name,
      username:isUserExists.username,
      email: isUserExists.email,
      role: "user",
      userId : isUserExists._id
    };

    const token = await jwt.sign(
      { userId: isUserExists._id },
      process.env.JWT_SECRET
    );

    res.cookie("token", token);
    return res.json({
      success: true,
      message: "Login successfull.",
      userData,
    });
  } catch (error) {
    return res.json({ success: falsse, error: error });
  }
};



export const Register = async (req, res) => {
  try {
    const { name, email, password,username } = req.body.userData;
    if (!name || !email || !password || !username) {
      return res.json({ success: false, error: "All fields are required." });
    }
    const isEmailExist = await User.findOne({ email: email });
    console.log(isEmailExist, "isEmailExist");
    if (isEmailExist) {
      return res.json({
        success: false,
        error: "Email is exists, please use another one.",
      });
    }

    const isUserNameExist = await User.findOne({  username:username});
    console.log(isUserNameExist, "isUserNameExist");
    if (isUserNameExist) {
      return res.json({
        success: false,
        error: "UserName is exists, please use another one.",
      });
    }

    const encryptedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      name: name,
      username:username,
      email: email,
      password: encryptedPassword,
    });

    const responseFromDb = await newUser.save();

    return res.json({
      success: true,
      message: " Successfull Sing up.",
    });
  } catch (error) {
    console.log(error, "error");
    return res.json({ error: error, success: false });
  }
};


export const Logout = async (req, res) => {
  try {
      res.clearCookie("token");
      return res.json({ success: true, message: "Logged out successfully." });
  } catch (error) {
      return res.json({ success: false, error });
  }
};



export const getCurrentUser = async (req, res) => {
  try {
    const token = req.cookies.token;
    // console.log(token, "token");
    const data = await jwt.verify(token, process.env.JWT_SECRET);
    console.log(data, "data");
    if (data?.adminId) {
      const admin = await Admin.findById(data?.adminId);
      if (!admin) {
        return res.json({ success: false });
      }
      const adminData = {
        name: admin.name,
        email: admin.email,
        role: "admin",
        userId: admin._id,
      };
      return res.json({ success: true, userData: adminData });
    } else {
      const user = await User.findById(data?.userId);
      if (!user) {
        return res.json({ success: false });
      }
      const userData = {
        name: user.name,
        username: user.username,
        email: user.email,
        role: "user",
        userId: user._id,
      };
      return res.json({ success: true, userData });
    }
  } catch (error) {
    return res.json({ success: false, error });
  }
};





import Post from "../Model/Post.model.js"

export const AllPosts = async (req, res) => {
  try {
    const posts = await Post.find({});
    res.json({ success: true, posts });
  } catch (error) {
    return res.json({ error, success: false });
  }
};


export const NewPosts = async (req, res) => {
  try {
    const {  image , caption} = req.body.postData;
    const { userId } = req.body;
    if (!image || !caption ) {
      return res.json({ success: false, error: "All fields are required." });
    }
    const isPostExist = await Post.findOne({
      image,
      caption,
      creatorId: userId,
      // creatorname:
    });
    if (isPostExist) {
      return res.json({ success: false, error: "post is already exists." });
    }

    const newPost = new Post({
     
      image:image,
      caption:caption,
      creatorId: userId,
    });
    await newPost.save();

    return res.json({
    });
  } catch (error) {
    console.log(error, "error");
    return res.json({ error: error, success: false });
  }
};



export const search = async (req, res) => {
  try {
    const { searchedWord } = req.body;

    const searchedrecipes = await Recipe.find({
      $or:[{username: { $regex: searchedWord, $options: "i" }}]
      
    });
    res.json({ success: true, searchedrecipes });
  } catch (error) {
    console.log(error, "error");
    return res.json({ error: error, success: false });
  }
};
  
  


  import mongoose  ,{ model, Schema } from "mongoose";

const userSchema = new Schema({
  name: String,
  username: String,
  email: String,
  password: { type: String, required: true },
  followers: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
  following: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
});

const User = model("Users", userSchema);

export default User;




import mongoose, { Schema, Types, model } from "mongoose";

const postSchema = new Schema({

    image: String,
    caption: String,
    // // creatorname: { type: mongoose.Schema.Types.ObjectId, ref: "Users" },
    creatorId: { type: mongoose.Schema.Types.ObjectId, ref: "Users" }

    

});

const Post = model("post", postSchema);

export default Post;


import {  useContext, useState } from "react";
import Api from "../axiosConfig";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import {AuthContext} from "../context/auth.context";


const AddPost = () => {
  const { state } = useContext(AuthContext);
  console.log(state, "state");
  const router = useNavigate();
  const [postData, setPosttData] = useState({
    image: "",
    caption:"",
  });
  function handleChange(event) {
    setPosttData({ ...postData, [event.target.name]: event.target.value });
   
  }

  async function handleSubmit(e) {
    e.preventDefault();
    try {
      if (
        postData.image  &&
        postData.caption
      ) {
        const response = await Api.post("/post/New-Posts", {
          postData,
          userId : state?.user?.userId
        });
        if (response.data.success) {
          setPosttData({
            image: "",
            caption:"",
          });
          router("/");
          toast.success(response.data.message);
        }
      } else {
        throw Error("All fields are mandatory.");
      }
    } catch (error) {
      console.log(error, "error");
      toast.error(error.response.data.error);
    }
  }

 
  return (
    <div>
      <form onSubmit={handleSubmit}>
        <h1>Add New Post</h1>
        
        <br />
        <input
          type="url"
          onChange={handleChange}
          name="image"
          value={postData.image}
          placeholder="Image"
        />
      
        <br />
        <input
          type="text"
          onChange={handleChange}
          name="caption"
          value={postData.caption}
          placeholder="caption"
        />
        <br />
       
        <input  type="submit" value="Add Post" />
        <br />
      </form>
    </div>
  );
};



export default AddPost;



import { useContext, useEffect, useState } from "react";
import Api from "../axiosConfig";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../context/auth.context";
import toast from "react-hot-toast";
import "../style/Home.css";

function Home() {
  const [allPosts, setAllPosts] = useState([]);
  console.log(allPosts, "allPosts");
  const [loading, setLoading] = useState(false);
  
  const { state ,dispatch } = useContext(AuthContext);
  
  const router=useNavigate();

  async function GetPosts() {
    setLoading(true);
    try {
      const response = await Api.get("/post/all-posts"); 
      if (response.data.success) {
        setLoading(false);
        setAllPosts(response.data.posts); 
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function handleLogout() {
    try {
        const response = await Api.post("/auth/logout");
        if (response.data.success) {
            dispatch ({ type: "LOGOUT" });
            router("/login");
            toast.success(response.data.message);
        } else {
            toast.error( "Logout failed.");
        }
    } catch (error) {
        toast.error("Failed to logout.");
    }
}

  useEffect(() => {
    GetPosts();
  }, []);

  return (
    <div className="mainhomepage">

      <div className="navbar">
      <h1 className="logo">Instagram</h1>

     <div className="Home">
     <div className="Home1">
     <i class="fa-solid fa-house"></i>
     </div>
     <div className="Home2">
      <p>Home</p>
     </div>
     </div>
    
    
     <div className="Search">
     <div className="Search1">
     <i class="fa-solid fa-magnifying-glass"></i>
     </div>
     <div className="Search2">
      <p>Search</p>
     </div>
     </div>
      
     <div className="Explore">
     <div className="Explore1">
      <i class="fa-regular fa-compass"></i>
     </div>
     <div className="Explore2">
      <p>Explore</p>
     </div>
     </div>
     
     <div className="Reels">
     <div className="Reels1">
     <i class="fa-solid fa-play"></i>
      
     </div>
     <div className="Reels2">
      <p>Reels</p>
     </div>
     </div>


     <div className="Messages">
     <div className="Messages1">
     <i class="fa-solid fa-message"></i>
      
     </div>
     <div className="Messages2">
      <p>Messages</p>
     </div>
     </div>
     
     <div className="Notifications">
     <div className="Notifications1">
     <i class="fa-regular fa-heart"></i>
      
     </div>
     <div className="Notifications2">
      <p>Notifications</p>
     </div>
     </div>


     
     <div className="Create">
     <div className="Create1">
     <i class="fa-regular fa-square-plus"></i>
      
     </div>
     <div className="Create2">
      <p>Create</p>
     </div>
     </div>

     
     <div className="Profile">
     <div className="Profile1">
     <i class="fa-regular fa-user"></i>
      
     </div>
     <div className="Profile2">
      <p>Profile</p>
     </div>
     </div>


     
     <div className="More">
     <div className="More1">
     <i class="fa-solid fa-bars"></i>
      
     </div>
     <div className="More2">
      <p>More</p>
     </div>
     </div>
      </div>



    
    <button onClick={handleLogout} className="logoutbutton">Logout</button>
      {loading ?  (
        <div className="instagramlogo">
         
        </div>
      ) : (
        <div
          className="postMainDiv"
        >
          {allPosts.map((posts) => (
              <div className="postimage"
              
              onClick={() => router(`/post/${posts._id}`)}
            >
              {/* <p>{state?.user?.username}</p> */}
              <img className="postimagesize"
               
                src={posts.image}
              />
              <p> {posts.caption}</p>
              <inpute 
              type="text"
              name="comment"
              placeholder="Add a comment...."
              />
            </div>
          ))}
        </div>
      )}
      <div className="SuggestDiv">
        
    <h1>UserName:-{state?.user?.username}</h1>
         <h1>Suggested for you</h1>
      </div>



    </div>
  );
}
    export default Home;